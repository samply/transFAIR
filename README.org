#+title: Routine Connector
Ziel des Routine Connector ist es, Forschungsdatensätze mit Daten aus der Routineversorgung für eingewilligte Patienten*innen anzureichern. Als Basis dafür, wird auf die im Rahmen der  [[https://www.medizininformatik-initiative.de/][Medizininformatik-Initiative]] (MII) an den Universitätskliniken etablierten Komponenten und Schnittstellen zugegriffen.
Ähnlich zum Routine Connector wurde bisher in den Konzepten der MII vorgesehen, dass Projektdaten zusammen mit einem Projektspezifischen Pseudonym exportiert werden können. Der Hauptunterschied hierbei ist, dass im Routine Connector auch ein Linkage mit den Forschungsdatensätze vorgesehen ist, während die MII Schnittstelle diesen Aspekt außen vorlässt. Da auch das Broad Consent der MII so ein Linkage nicht vorsieht, ist es Aufgabe der durchführenden Projekte, die rechtlichen Grundlagen für ein entsprechendes Linkage zu klären.
* Konzept
Die Hauptidee ist, das man mit den vorhandenen LDAT eines Projektes auf die Standort TTP zugehen kann. Hierfür muss natürlich, je nach Standort eine eigenen Schnittstelle implementiert werden. Dafür sollten alle anderen Aufrufe einfachen Interaktionen mit der FHIR Restschnittstelle entsprechen. Der Routine Connector, in der Grafik als "Adapter" bezeichnet, kann sowohl als Teil des [[https://github.com/samply/bridgehead][Brückenkopfes]] betrieben werden, oder aber auch in der lokalen Transferstelle.
Abhängig von den vorhandenen LDAT gibt es zwei Szenarien, für die Interaktion:
** LDAT entsprechen IDAT der Patienten
In diesem Fall muss ein neuen Record Linkage zwischen den Projekt Daten und den TTP Daten ermöglicht werden. Die folgende Grafik stellt den vollständigen Prozess dar:
[[file:./docs/assets/process-with-idat.png]]
** LDAT enthalten ein der Transferstelle bekanntes Pseudonym
Hierbei wird davon ausgegangen, dass in den Projektdaten bereits ein Pseudonym enthalten ist, dass auch der Transferstelle bekannt ist. In diesem Fall muss kein erneutes Record Linkage stattfinden, weshalb die Interaktion mit der TTP entfällt.
[[file:./docs/assets/process-with-local-pseudonym.png]]
* Benötigte Schnittstellen an den Standorten
Für die Durchführung des Linkages sind Schnittstellen notwendig, die in dieser Form bisher noch nicht im Rahmen der MII genutzt wurden, von denen aber anzunehmen ist, dass diese bereits in großen Teilen vorhanden sind. Im Folgenden werden diese Schnittstellen kurz benannt:
- Beantragen eines neuen Projektpseudonyms und Verlinkung mit bereits vorhandenen Patienten auf Basis von im Projekt vorhandenen LDAT
- Abfrage von Patientenpseudonymen auf Basis eines bereits bekannten Pseudonyms
- Speicherung von Einwilligung im [[https://www.hl7.org/fhir/R4/consent.html][HL7-FHIR Consent Format]]
- Abfragen von Einwilligungen im [[https://www.hl7.org/fhir/R4/consent.html][HL7-FHIR Consent Format]]
* Konfiguration
Die Konfiguration des Routine Connectors besteht aus einer allgemeinen, auf alle von der Instanz behandelten Projekte zutreffende, Konfiguration und zusätzlich mehreren Projekten die beim starten des Routine Connectors angegeben werden können.
** Allgemeine Konfiguration
| Environment           | Beschreibung                                                                                          | Default |
| INSTITUTE_TTP_URL     | Adresse der TTP mit welcher der Routine Connector das Linkage durchführen soll                        | -       |
| INSTITUTE_TTP_API_KEY | ApiKey der bei der Kommunikation mit der TTP verwendet wird (z. Bsp. ML_API_KEY bei der Mainzelliste) | -       |
| DATABASE_URL          | Pfad zur vom Routine Connector verwendeten SQLLite Datenbank                                          | -       |
Der Routine Connector unterstützt nur das Record Linkage mit einer TTP, sollte eine weitere TTP benötigt werden muss eine neue Instanz hochgefahren werden.
Standardmäßig legt der Routine Connector im Ausführungsverzeichnis eine SQLite Datenbank zum Speichern der Anfragen an.
** Projektspezifische Konfiguration
Pro Projekt muss außerdem über das Startargument =projects= des Connectors die beteiligten FHIR Stores konfiguriert werden. Pro projekt wird ein JSON String erwartet der folgende Struktur haben sollte:
#+begin_src json
{
    "consent_fhir_url": "http://localhost:8085",
    "consent_fhir_api_key": "bla",
    "mdat_fhir_url": "http://localhost:8086",
    "mdat_fhir_api_key": "foo",
    "project_fhir_url": "http://localhost:8095",
    "project_fhir_api_key": "foobar"
}
#+end_src
Mehrere Projekte können folgendermaßen angegeben werden (getrennt durch Leerzeichen):
#+begin_src
cargo run -- --projects '<project-json-1>' '<project-json-2>'
#+end_src
* API
Die API des Routine Connector besteht aus drei Schnittstellen. Beim Beschreiben dieser Schnittstellen wird angenommen, das der Routine Connector auf http://localhost:8080 läuft.
** POST /requests
Erstellen einer neuen Anfrage für gelinkte Daten:
#+begin_src restclient
POST http://localhost:8080/requests

{
  "idat": {
    "firstname": "...",
    ...
  },
  "consent": <hl7-fhir-consent-resource>
}
#+end_src
Bei der Verarbeitung der Anfrage werden die Schritte aus "Funktionsweise: 1)" durchgeführt. Im Erfolgsfall liefert der Routine Connector einen Link auf die neu erstellte Datenanfrage beim Datenintegrationszentrum:
#+begin_src
201 CREATED
Location: :ROUTINE_CONNECTOR_INTERFACE/requests/<request-id>
#+end_src
** GET /requests/<request-id>
Übersicht der laufenden Anfragen und dem aktuellen Status
Prüft den Status einer Anfrage:
#+begin_src restclient
GET http://localhost:8080/requests/<request-id>
#+end_src
Als Antwort wird eine Übersicht aller laufenden Anfragen des Routine Connector angezeigt. Diese werden jeweils mit ID und Status gemeldet, wobei folgende Anfrage Status möglich sind
| Status           | Bedeutung                                                                                                                    |
| created          | Anfrage wurde beim Datenintegrationszentrum erstellt, bisher wurden aber keine Daten geliefert                               |
| data-loaded      | Daten wurden vom Datenintegrationszentrum geliefert und in den Projektstore geladen                                          |
| update-available | Es wurden bereits Daten in den Projektstore geladen, aber das Datenintegrationszentrum hat mittlerweile neue Daten geliefert |
| error            | Ein Fehler ist bei der Anfrage aufgetreten, dieser kann in den Logs verfolgt identifiziert werden                            |
#+begin_src
200 OK

{"id": "<request-id>", "status": "created|data-loaded|update-available|error"}
#+end_src
** GET /requests
Prüft den Status aller Anfragen:
#+begin_src restclient
GET http://localhost:8080/requests
#+end_src
#+begin_src
200 OK

[
  {"id": "<request-id>", "status": "created|data-loaded|update-available|error"}
]
#+end_src
* Entwickler
Um eine Entwicklungsumgebung aufzusetzen, reicht es normalerweise die im Repository enthaltene Docker Compose Umgebung hochzufahren:
#+begin_src bash
docker compose up -d
#+end_src

Um den Routine Connector zu bauen muss außerdem Rust und SQLite installiert sein.
#+begin_src
cargo build
#+end_src

Anschließend kann der Routine Connector mit folgenden Befehl gestartet werden:
#+begin_src
cargo run -- --institute-ttp-url="http://localhost:8081" --institute-ttp-api-key="routine-connector-password" --database-url="sqlite://data_requests.sql?mode=rwc" --projects '{"consent_fhir_url": "http://localhost:8085", "consent_fhir_api_key": "bla", "mdat_fhir_url": "http://localhost:8086", "mdat_fhir_api_key": "foo", "project_fhir_url": "http://localhost:8095", "project_fhir_api_key": "foobar"}'
#+end_src

** How to run
This tool expects some arguments to be passed to it, from either the command line, or from an ~.env~ file. The values in the ~.env~ file were not 
getting read, so include them in your cargo tool's ~config.toml~ file (Linux location is ~/.cargo/config.toml). You can copy paste the contents of
the ~.env~ file to the ~config.toml~ file.

* Weitere Informationen
Im bisherigen Rahmen der Entwicklungen wurden mehrere Dokumente angelegt, die im [[file:docs][docs]] Ordner hinterlegt sind. Diese enthalten:
- [[file:Testlauf der Schnittstellen.org][Testlauf der Schnittstellen]] :: Erstes Dokument in dem die notwendigen Aufrufe gesammelt wurden
- [[file:Referenzimplementierung Transferstelle.org][Referenzimplementierung Transferstelle.org]] :: Enthält die notwendigen Api Aufrufe durch die Transferstelle
- [[file:docs/api/][api]] :: Enthält mehrere Bash Skripte die mittels curl die Api des Routine Connector aufrufen

* Roadmap
** Fertigstellung Prozess mit IDAT
- [ ] Austausch der Identifier in den FHIR Resourcen sicher stellen
- [ ] Update des Data Request Status in der Datenbank implementieren
** Anpassung an den Prozess ohne IDAT
- [ ] Schnittstelle für POST auf =/requests= erweitern, sodass anstatt idat, ldat entgegengenommen werden
** Konfiguration für die Projekte des Routine Connectors über eine .well-known URL beziehen
** Implementierung von Schnittstellen der THS Greifswald
